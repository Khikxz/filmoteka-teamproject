{"mappings":"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","sources":["src/js/script.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'api_key=b5e824a3d922f68ba211fcf6dbdcb6f5';\nconst API_URL = BASE_URL + '/discover/movie?sort_by-popularity.desc&' + API_KEY;\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst searchURL = BASE_URL + '/search/movie?' + API_KEY;\nconst getGenres = BASE_URL + '/genre/movie/list?' + API_KEY;\n\n\n//localStorage\nlet currentMovieTitle, currentMovieID, queue, watched;\nJSON.parse(localStorage.getItem(\"movie-queue\")) === null? queue = [] : queue = JSON.parse(localStorage.getItem(\"movie-queue\"));\nlocalStorage.setItem(\"movie-queue\", JSON.stringify(queue));\n\nJSON.parse(localStorage.getItem(\"movie-watched\")) === null? watched = [] : watched = JSON.parse(localStorage.getItem(\"movie-watched\")) ;\nlocalStorage.setItem(\"movie-watched\", JSON.stringify(watched));\n\n\n// MODAL SECTION\nconst modal = document.getElementById('myModal');\nconst modalPoster = document.getElementById('modal-poster');\nconst modalTitle = document.getElementById('modal-title');\nconst modalVote = document.getElementById('modal-vote');\nconst modalPopularity = document.getElementById('modal-popularity');\nconst modalOrigTitle = document.getElementById('modal-original-title');\nconst modalGenre = document.getElementById('modal-genre');\nconst modalOverview = document.getElementById('modal-overview');\nconst addToWatchedBtn = document.getElementById('addToWatchedBtn');\nconst addToQueuBtn = document.getElementById('addToQueuBtn');\nconst closeBtn = document.getElementsByClassName('close')[0];\n\nlet genres; \n\nfetch(getGenres)\n    .then(response => response.json())\n    .then(data => {\n        genres = data.genres;\n      getMovies(API_URL, genres); // Call getMovies with genres\n      showMovies(data, genres)\n    })\n    .catch(error => {\n        console.error('Error fetching genres:', error);\n    });\n\n// function to open the modal with movie details\nfunction openModal(movie) {\n\n  modalPoster.src = `https://image.tmdb.org/t/p/w500/${movie.poster_path}`;\n  modalTitle.textContent = movie.title.toUpperCase();\n  modalVote.textContent =\n    movie.vote_average.toFixed(1) + '   /   ' + movie.vote_count;\n  modalPopularity.textContent = movie.popularity.toFixed(1);\n  modalOrigTitle.textContent = movie.original_title.toUpperCase();\n  // modalGenre.textContent = movie.genre_ids;\n\n  const movieGenres = movie.genre_ids.map(genreId => {\n    const genre = genres.find(genre => genre.id === genreId);\n    return genre ? genre.name : '';\n}).join(', ');\n\nmodalGenre.textContent = movieGenres;\n  modalOverview.textContent = movie.overview;\n  modal.style.display = 'block';\n  currentMovieID = movie.id;\n  currentMovieTitle = movie.original_title;\n}\n\n// function to close the modal\nfunction closeModal() {\n  modal.style.display = 'none';\n}\n\n// event listener for the close button\ncloseBtn.addEventListener('click', closeModal);\n\n// event listener for clicks outside the modal\nwindow.addEventListener('click', function (event) {\n  if (event.target === modal) {\n    closeModal();\n  }\n});\n\nconst main = document.getElementById('main');\nconst form = document.getElementById('search-form');\nconst search = document.getElementById('search-input');\nconst loader = document.querySelector('.loader-container');\n\n// PAGINATION\n\n\ngetMovies(API_URL);\n\nlet lastUrl;\n// DISPLAY MOVIE CARDS\nfunction getMovies(url) {\n  lastUrl = url;\n  \n  main.classList.toggle('is-hidden');\n  loader.classList.toggle('is-hidden');\n\n  fetch(url)\n    .then(res => res.json())\n    .then(data => {\n      console.log(data.results);\n      if (data.results.length !== 0) {\n        showMovies(data.results);\n        currentPage = data.page;\n        nextPage = currentPage + 1;\n        prevPage = currentPage - 1;\n        totalPages = data.total_pages;\n        main.classList.toggle('is-hidden');\n        loader.classList.toggle('is-hidden');\n\n        current.innerText = currentPage;\n        if (currentPage <= 1) {\n          prev.classList.add('disabled');\n          next.classList.remove('disabled');\n        } else if (currentPage >= totalPages) {\n          prev.classList.remove('disabled');\n          next.classList.add('disabled');\n        } else {\n          prev.classList.remove('disabled');\n          next.classList.remove('disabled');\n        }\n      } else {\n        main.classList.toggle('is-hidden');\n        loader.classList.toggle('is-hidden');\n        main.innerHTML = `<h1 class=\"no-results\">No Results Found</h1>`;\n      }\n    })\n    .catch(error => {\n      console.error('Error fetching movies:', error);\n      main.classList.toggle('is-hidden');\n      loader.classList.toggle('is-hidden');\n      main.innerHTML = `<h1 class=\"no-results\">Error fetching movies</h1>`;\n  });\n}\n\nfunction showMovies(data) {\n  main.innerHTML = '';\n\n  data.forEach(movie => {\n    const { title, poster_path, release_date, genre_ids } = movie;\n    const movieEl = document.createElement('div');\n    movieEl.classList.add('movie');\n\n    const movieGenres = genre_ids && Array.isArray(genres)\n            ? genre_ids.map(genreId => {\n                const genre = genres.find(genre => genre.id === genreId);\n                return genre ? genre.name : '';\n            }).join(', ')\n        : '';\n    \n        const releaseYear = release_date ? (new Date(release_date)).getFullYear() : '';\n\n    movieEl.innerHTML = `\n            <img src=\"${\n              poster_path\n                ? IMG_URL + poster_path\n                : 'http:/>/via.placeholder.com/1080x1500'\n            }\"\n                alt=\"${title}\"/>\n            \n            <div class=\"movie-info\">\n                <h3>${title.toUpperCase()}</h3>\n                <div class=\"movie-details\">\n                    <span id=\"genre\">${movieGenres}</span> |\n                    <span id=\"release_date\">${release_date.slice(\n      0,\n      4\n    )}</span>\n                </div>\n            </div>        \n        `;\n    movieEl.addEventListener('click', function () {\n      openModal(movie);\n    });\n    main.appendChild(movieEl);\n  });\n}\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n\n  const searchTerm = search.value;\n\n  if (searchTerm) {\n    getMovies(searchURL + '&query=' + searchTerm);\n  } else {\n    getMovies(API_URL);\n  }\n});\n\n// function for previous page\nprev.addEventListener('click', () => {\n  if (prevPage > 0) {\n    pageCall(prevPage);\n  }\n});\n\n// function for the next page\nnext.addEventListener('click', () => {\n  if (nextPage <= totalPages) {\n    pageCall(nextPage);\n  }\n});\n\nexport function pageCall(page) {\n  let urlSplit = lastUrl.split('?');\n  let queryParams = urlSplit[1].split('&');\n  let key = queryParams[queryParams.length - 1].split('=');\n  if (key[0] != 'page') {\n    let url = lastUrl + '&page=' + page;\n    getMovies(url);\n  } else {\n    key[1] = page.toString();\n    let a = key.join('=');\n    queryParams[queryParams.length - 1] = a;\n    let b = queryParams.join('&');\n    let url = urlSplit[0] + '?' + b;\n    getMovies(url);\n  }\n}\n\n\n//Clicking a movie\nmain.addEventListener('click', e => {\n  let currentMovie = e.target.parentElement;\n  currentMovieTitle = currentMovie.lastElementChild.firstElementChild.innerText;\n  console.log(currentMovieTitle);\n});\n\n//Add to Watched (localStorage)\naddToWatchedBtn.addEventListener('click', () => {\n  watched.includes(currentMovieTitle)\n    ? alert(`${currentMovieTitle} has been watched already`)\n    : watched.push(currentMovieTitle);\n  localStorage.setItem('movie-watched', JSON.stringify(watched));\n});\n\n//Add to Queue (localStorage)\naddToQueuBtn.addEventListener('click', () => {\n  queue.includes(currentMovieTitle)\n    ? alert(`${currentMovieTitle} has been added to the queue already`)\n    : queue.push(currentMovieTitle);\n  localStorage.setItem('movie-queue', JSON.stringify(queue));\n});\n\n//Add to Watched (localStorage)\naddToWatchedBtn.addEventListener('click', () => {\n    watched.includes(currentMovieID) ? \n        alert(`${currentMovieTitle} has been watched already`) :\n        watched.push(currentMovieID);\n        localStorage.setItem('movie-watched', JSON.stringify(watched));\n})\n\n//Add to Queue (localStorage)\naddToQueuBtn.addEventListener('click', () => {\n    queue.includes(currentMovieID) ? \n        alert(`${currentMovieTitle} has been added to the queue already`) :\n        queue.push(currentMovieID);\n        localStorage.setItem('movie-queue', JSON.stringify(queue));\n})\n\n//Pressing escape to close modal\ndocument.body.addEventListener('keydown', event => {\n  if (event.code === 'Escape') {\n    closeModal();\n  }\n});\n"],"names":["$1ee2b6306238ec66$var$API_KEY","$1ee2b6306238ec66$var$API_URL","$1ee2b6306238ec66$var$BASE_URL","$1ee2b6306238ec66$var$currentMovieTitle","$1ee2b6306238ec66$var$currentMovieID","$1ee2b6306238ec66$var$queue","$1ee2b6306238ec66$var$watched","JSON","parse","localStorage","getItem","setItem","stringify","$1ee2b6306238ec66$var$modal","document","getElementById","$1ee2b6306238ec66$var$modalPoster","$1ee2b6306238ec66$var$modalTitle","$1ee2b6306238ec66$var$modalVote","$1ee2b6306238ec66$var$modalPopularity","$1ee2b6306238ec66$var$modalOrigTitle","$1ee2b6306238ec66$var$modalGenre","$1ee2b6306238ec66$var$modalOverview","$1ee2b6306238ec66$var$addToWatchedBtn","$1ee2b6306238ec66$var$addToQueuBtn","$1ee2b6306238ec66$var$closeBtn","getElementsByClassName","$1ee2b6306238ec66$var$genres","$1ee2b6306238ec66$var$closeModal","style","display","fetch","then","response","json","data","genres","$1ee2b6306238ec66$var$getMovies","$1ee2b6306238ec66$var$showMovies","catch","error","console","addEventListener","window","event","target","$1ee2b6306238ec66$var$main","$1ee2b6306238ec66$var$form","$1ee2b6306238ec66$var$search","$1ee2b6306238ec66$var$loader","querySelector","$1ee2b6306238ec66$var$lastUrl","url","classList","toggle","res","log","results","length","currentPage","page","nextPage","prevPage","totalPages","total_pages","current","innerText","prev","add","next","remove","innerHTML","forEach","movie","title","poster_path","release_date","genre_ids","movieEl","createElement","movieGenres","Array","isArray","map","genreId","genre2","find","genre","id","name","join","Date","getFullYear","toUpperCase","slice","src","textContent","vote_average","toFixed","vote_count","popularity","original_title","genre1","overview","$1ee2b6306238ec66$var$openModal","appendChild","$1ee2b6306238ec66$export$26f0a13c57387c91","urlSplit","split","queryParams","key","toString","a","b","e","preventDefault","searchTerm","value","$1ee2b6306238ec66$var$searchURL","currentMovie","parentElement","lastElementChild","firstElementChild","includes","alert","push","body","code"],"version":3,"file":"index.eb85c1d0.js.map"}